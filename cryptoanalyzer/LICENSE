# cryptoanalyzer/loader.py

import os
import glob
import fnmatch
import ast
from typing import List
from cryptoanalyzer.config import Config

def load_config(config_path: str = None) -> Config:
    """
    Load CryptoAnalyzer configuration.

    :param config_path: Optional path to a specific config file.
    :return: Config object with settings (disabled rules, excludes, etc.).
    """
    return Config.load(config_path)

def discover_source_files(target: str, config: Config = None) -> List[str]:
    """
    Discover Python source files to analyze, respecting glob patterns,
    directories, single files, and exclude patterns from config.

    :param target: File path, directory, or glob pattern to scan.
    :param config: Optional Config instance; if not provided, one will be loaded.
    :return: Sorted list of .py file paths to analyze.
    """
    config = config or load_config()
    exclude_patterns = config.exclude_patterns

    # Resolve the initial set of paths
    if any(c in target for c in ("*", "?", "[")):
        # Treat as glob
        paths = glob.glob(target, recursive=True)
    elif os.path.isfile(target):
        paths = [target]
    else:
        # Walk directory
        paths = []
        for root, _, files in os.walk(target):
            for fname in files:
                if fname.endswith(".py"):
                    paths.append(os.path.join(root, fname))

    # Filter out non-.py files and excluded paths
    def is_excluded(path: str) -> bool:
        for pattern in exclude_patterns:
            if fnmatch.fnmatch(path, pattern):
                return True
        return False

    files = [
        p for p in paths
        if p.endswith(".py") and not is_excluded(p)
    ]

    return sorted(files)

def parse_file(file_path: str) -> ast.AST:
    """
    Parse a Python source file into an AST.

    :param file_path: Path to a .py file.
    :return: The parsed AST.
    """
    with open(file_path, encoding="utf-8") as f:
        source = f.read()
    return ast.parse(source, filename=file_path)
